	template <class Method>
	struct ConstMethodBase : MethodBase
	{
		typedef Method MethodType;
		Method method;
		ConstMethodBase(Method M, const Label &N) 
			: method(M), MethodBase(Constness::Const, N) { }
		void NonConstInvoke(const Object & Q, Stack &S)
		{
			ConstInvoke(Q, S);
		}

	protected:
		ConstMethodBase(Method M, const Label &N, Constness C) 
			: method(M), MethodBase(C, N) { }
	};

	template <class Method>
	struct MutatingMethodBase : ConstMethodBase<Method>
	{
	protected:

		MutatingMethodBase(Method M, const Label &N) 
			: ConstMethodBase<Method>(M, N, Constness::Mutable) { }

		void ConstInvoke(const Object &, Stack &)
		{
			KAI_THROW_1(ConstError, "Mutating method");
		}
	};


