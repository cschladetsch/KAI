#pragma once

#include "KAI/Translator/Config.h"
#include "KAI/Translator/TokenBase.h"
#include "KAI/Translator/AstNodeBase.h"

KAI_BEGIN

struct RhoAst 
{
	enum Enum
	{
		None,
		Program,
		Ident,
		GetMember,
		Function,
		Block,
		Conditional,
		Assignment,
		Call,
		Increment,
		Decrement,
		TokenType,
		Positive,
		Negative,
		ArgList,
		IndexOp,

		ForEach,
		For,

		List,
		Map,
	};

	struct Node : AstNodeBase<RhoAst>
	{
		typedef AstNodeBase<RhoAst> Parent;

		Node() : Parent(Enum::None) {  }
		Node(Enum e) : Parent(e) { }
		Node(Enum e, typename RhoToken::Node &tok) : Parent(e, tok) { }

		friend std::ostream &operator<<(std::ostream &out, Node const &node)
		{
			return out << ToString(node.type) << ": " << node.token;
		}
	};
};

typedef RhoAst::Node RhoAstNode;

// A node in the AST generated by a Parser

KAI_END

