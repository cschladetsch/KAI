#pragma once

#include <vector>
#include <memory>

#include "KAI/Translator/Config.h"
#include "KAI/Translator/Token.h"

KAI_BEGIN

// A node in the AST generated by a Parser
struct Node
{
	enum Type
	{
		None,
		Program,
		Ident,
		GetMember,
		Function,
		Block,
		Conditional,
		Assignment,
		Call,
		Increment,
		Decrement,
		TokenType,
		Positive,
		Negative,
		ArgList,
		IndexOp,

		ForEach,
		For,

		List,
		Map,
	};

	static const char *ToString(Node::Type ty);
	Type type;
	Token token;
	typedef std::vector<std::shared_ptr<Node>> ChildrenType;
	ChildrenType Children;

	Node() : type(None) {  }
	Node(Token tok) : type(TokenType), token(tok) {  }
	Node(Type t) : type(t) {  }
	Node(Type t, Token tok) : type(t), token(tok) {  }

	void Add(Token const &tok)
	{
		Add(std::make_shared<Node>(tok));
	}

	void Add(std::shared_ptr<Node> node)
	{
		Children.push_back(node);
	}

	friend std::ostream &operator<<(std::ostream &out, Node const &node)
	{
		return out << ToString(node.type) << ": " << node.token;
	}
};

KAI_END

