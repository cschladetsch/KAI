#pragma once

#include "KAI/Translator/Config.h"
#include "KAI/Translator/TokenBase.h"
#include "KAI/Translator/AstNodeBase.h"
#include "KAI/Translator/Pi/PiToken.h"

KAI_BEGIN

// A node in the AST generated by a Parser
struct PiAstNodeEnumType
{
	enum Enum
	{
		None,
		Anything,
	};

	static const char *ToString(Enum val);

	struct Node : AstNodeBase<PiToken, PiAstNodeEnumType>
	{
		typedef AstNodeBase<PiToken, PiAstNodeEnumType> Parent;
		using typename Parent::Token;

		Node() : Parent(Enum::None) {  }
		Node(Enum e) : Parent(e) { }
		Node(Enum e, Token &tok) : Parent(e, tok) { }
		Node(Parent::Token tok) : Parent(tok) { }

		friend std::ostream &operator<<(std::ostream &out, Node const &node)
		{
			return out << ToString(node.type) << ": " << node.token;
		}
	};
};

typedef PiAstNodeEnumType::Node PiAstNode;

KAI_END

