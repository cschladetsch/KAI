
namespace MLB
{
	interface Test
	{
		void Pin() const;
		void Pin();
		sync void Pin();

		DateTime Ping(DateTime sent) const;
		DateTime Ping(DateTime sent);

		int Twice(int) const;
		sync int Twice(int) const;

		float Mul(float, float) const;
		sync float Mul(float, float) const;

		string Twice(string) const;

		void TestAddList(Proxy<List> list, Object obj);

		int TestProxy(Proxy<int> N, int M);

		T twice_template<T>(T);
		T twice_template<T>(T) const;
		sync T twice_template<T>(T) const;

		T twice_template<T>()(Proxy <T>);
		sync T twice_template<T>()(Proxy <T>);

		string SomeString;
	};
}

// Proxy (user) side
namespace MLB
{
	namespace Proxy
	{
		class TestProxy : Proxy<TestProxy>
		{
        public:
            Future<string> Something()
            {
                return SendMessageWithResponse<string>("Get:Something");
            }

            void Something(string const &val)
            {
                return SendMessage<string>("Set:Something", val);
            }

			void Pin() const
			{
				SendMessage("Pin");
			}

			Future<int> Twice(int num)
			{
				return SendMessageWithResponse<int>("Twice", num);
			}

			Future <DateTime> Ping(DateTime sent)
			{
				return SendMessageWithResponse<DateTime>("Ping", sent);
			}
		};
	}
}

namespace MLB
{
	namespace Agent
	{
		class TestAgent : Agent<TestAgent>
		{
			static void Register(Registry &R)
			{
				void(Test::*) () = &Test::Pin;
				void(Test::*) () const = &Test::Pin
				DateTime(Test::*)(DateTime) const = &Test::Ping;
				int(Test::*) (Proxy < int > N, int M) = &Test::TestProxy;
				String(Test::*) = &Test::SomeString;

				ClassBuilder<Test>(Label("TestProxy"))
						.Methods
								("Pin", Pin)
								("Pin_Const", Pin_Const)
								("Ping", Ping)
								("TestProxy", TestProxy)
						.Properties
								("SomeString", SomeString);
			}

			struct NetMethodCall
			{
				String method;
				auto args = New<List>();
				bool _const;
				Type::Number return_type;
				NetHandle sender;

				NetMethodCal(NetHandle from, BinaryPacket &pkt)
					: sender(from)
				{
					pkt >> return_type >> method >> _const >> args;
				}
			};

			BasePointer<FutureBase> InvokeMethod(NetHandle sender, BinaryPacket &pkt)
			{
				return Agent<TestAgent>::Invoke(MethodCall(sender, pkt));
			}

			BasePointer<FutureBase> SetField(NetHandle sender, BinaryPacket &pkt)
			{
			}

			BasePointer<FutureBase> GetField(NetHandle sender, BinaryPacket &pkt)
			{
			}
		};
	}
}

